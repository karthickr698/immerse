[{"/home/karthick/Desktop/rebalance/immerse/src/index.js":"1","/home/karthick/Desktop/rebalance/immerse/src/Components/Header.jsx":"2","/home/karthick/Desktop/rebalance/immerse/src/Components/Department.jsx":"3","/home/karthick/Desktop/rebalance/immerse/src/mock_data_supply.js":"4","/home/karthick/Desktop/rebalance/immerse/src/MOCK_DATA.js":"5","/home/karthick/Desktop/rebalance/immerse/src/Components/chart.js":"6","/home/karthick/Desktop/rebalance/immerse/src/Components/Analytics/Department.jsx":"7","/home/karthick/Desktop/rebalance/immerse/src/utils/allyProps.js":"8","/home/karthick/Desktop/rebalance/immerse/src/App.js":"9","/home/karthick/Desktop/rebalance/immerse/src/Components/Analytics.jsx":"10","/home/karthick/Desktop/rebalance/immerse/src/RoundedBars.js":"11","/home/karthick/Desktop/rebalance/immerse/src/Components/Analytics/Horizontal.jsx":"12","/home/karthick/Desktop/rebalance/immerse/src/Components/TabPanel.jsx":"13"},{"size":500,"mtime":1606808103050,"results":"14","hashOfConfig":"15"},{"size":325,"mtime":1606808103050,"results":"16","hashOfConfig":"15"},{"size":731,"mtime":1606808103050,"results":"17","hashOfConfig":"15"},{"size":1550,"mtime":1606808103050,"results":"18","hashOfConfig":"15"},{"size":35269,"mtime":1606808103050,"results":"19","hashOfConfig":"15"},{"size":2948,"mtime":1606809057464,"results":"20","hashOfConfig":"15"},{"size":4965,"mtime":1606926198331,"results":"21","hashOfConfig":"15"},{"size":145,"mtime":1606808103050,"results":"22","hashOfConfig":"15"},{"size":1928,"mtime":1606808103046,"results":"23","hashOfConfig":"15"},{"size":2153,"mtime":1606924929893,"results":"24","hashOfConfig":"15"},{"size":4601,"mtime":1606808103050,"results":"25","hashOfConfig":"15"},{"size":3524,"mtime":1606926185548,"results":"26","hashOfConfig":"15"},{"size":542,"mtime":1606808103050,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1bysxw6",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/karthick/Desktop/rebalance/immerse/src/index.js",[],["58","59"],"/home/karthick/Desktop/rebalance/immerse/src/Components/Header.jsx",[],"/home/karthick/Desktop/rebalance/immerse/src/Components/Department.jsx",[],["60","61"],"/home/karthick/Desktop/rebalance/immerse/src/mock_data_supply.js",["62"],"import { data } from \"./MOCK_DATA\";\r\nlet masteryCount,\r\n  autonomyCount,\r\n  trustCount,\r\n  purposeCount,\r\n  wellbeingCount = 0;\r\nlet masteryValue,\r\n  autonomyValue,\r\n  trustValue,\r\n  purposeValue,\r\n  wellbeingValue = 0;\r\n\r\nexport const averageValue = (data) => {\r\n  data.map((item, index) => {\r\n    switch (item.name) {\r\n      case \"mastery\":\r\n        masteryValue += item.value;\r\n        masteryCount++;\r\n        break;\r\n      case \"autonomy\":\r\n        autonomyValue += item.value;\r\n        autonomyCount++;\r\n        break;\r\n      case \"trust\":\r\n        trustValue += item.value;\r\n        trustCount++;\r\n        break;\r\n      case \"purpose\":\r\n        purposeValue += item.value;\r\n        purposeCount++;\r\n        break;\r\n      case \"wellbeing\":\r\n        wellbeingValue += item.value;\r\n        wellbeingCount++;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return [\r\n      { type: \"mastery\", value: masteryValue / masteryCount },\r\n      { type: \"autonomy\", value: autonomyValue / autonomyCount },\r\n      { type: \"trust\", value: trustValue / trustCount },\r\n      { type: \"purpose\", value: purposeValue / purposeCount },\r\n      { type: \"wellbeing\", value: wellbeingValue / wellbeingCount },\r\n    ];\r\n  });\r\n};\r\n\r\n// let arrayOfObjects = [{name: \"a\", value: 1}, {name: \"a\", value: 2}, {name: \"b\", value: 1}]\r\n// let result = {}\r\n// arrayOfObjects.forEach(item => {\r\n//     if(result[item.name]) {\r\n//         result[item.name] = result[item.name] + item.value\r\n//     } else {\r\n//         result[item.name] = item.value\r\n//     }\r\n// })\r\n","/home/karthick/Desktop/rebalance/immerse/src/MOCK_DATA.js",[],"/home/karthick/Desktop/rebalance/immerse/src/Components/chart.js",[],"/home/karthick/Desktop/rebalance/immerse/src/Components/Analytics/Department.jsx",[],"/home/karthick/Desktop/rebalance/immerse/src/utils/allyProps.js",[],"/home/karthick/Desktop/rebalance/immerse/src/App.js",[],"/home/karthick/Desktop/rebalance/immerse/src/Components/Analytics.jsx",[],"/home/karthick/Desktop/rebalance/immerse/src/RoundedBars.js",["63"],"import { Chart as ChartJS } from 'react-chartjs-2'\n\nChartJS.elements.Rectangle.prototype.draw = function() {\n    const ctx = this._chart.ctx\n    const vm = this._view\n    let left, right, top, bottom, signX, signY, borderSkipped\n    let borderWidth = vm.borderWidth\n  \n    // If radius is less than 0 or is large enough to cause drawing errors a max\n    // radius is imposed. If cornerRadius is not defined set it to 0.\n    let cornerRadius = this._chart.config.options.cornerRadius\n    if(cornerRadius < 0){ cornerRadius = 0 }\n    if(typeof cornerRadius == 'undefined'){ cornerRadius = 0 }\n  \n    if (!vm.horizontal) {\n      left = vm.x - vm.width / 2\n      right = vm.x + vm.width / 2\n      top = vm.y\n      bottom = vm.base\n      signX = 1\n      signY = bottom > top? 1: -1\n      borderSkipped = vm.borderSkipped || 'bottom'\n    }  \n  \n    // Canvas doesn't allow us to stroke inside the width so we can\n    // adjust the sizes to fit if we're setting a stroke on the line\n    if (borderWidth) {\n      // borderWidth shold be less than bar width and bar height.\n      const barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom))\n      borderWidth = borderWidth > barSize? barSize: borderWidth\n      const halfStroke = borderWidth / 2\n      // Adjust borderWidth when bar top position is near vm.base(zero).\n      const borderLeft = left + (borderSkipped !== 'left'? halfStroke * signX: 0)\n      const borderRight = right + (borderSkipped !== 'right'? -halfStroke * signX: 0)\n      const borderTop = top + (borderSkipped !== 'top'? halfStroke * signY: 0)\n      const borderBottom = bottom + (borderSkipped !== 'bottom'? -halfStroke * signY: 0)\n      // not become a vertical line?\n      if (borderLeft !== borderRight) {\n        top = borderTop\n        bottom = borderBottom\n      }\n      // not become a horizontal line?\n      if (borderTop !== borderBottom) {\n        left = borderLeft\n        right = borderRight\n      }\n    }\n  \n    ctx.beginPath()\n    ctx.fillStyle = vm.backgroundColor\n    ctx.strokeStyle = vm.borderColor\n    ctx.lineWidth = borderWidth\n  \n    // Corner points, from bottom-left to bottom-right clockwise\n    // | 1 2 |\n    // | 0 3 |\n    const corners = [\n      [left, bottom],\n      [left, top],\n      [right, top],\n      [right, bottom],\n    ]\n  \n    // Find first (starting) corner with fallback to 'bottom'\n    const borders = ['bottom', 'left', 'top', 'right']\n    let startCorner = borders.indexOf(borderSkipped, 0)\n    if (startCorner === -1) {\n      startCorner = 0\n    }\n  \n    function cornerAt(index) {\n      return corners[(startCorner + index) % 4]\n    }\n  \n    // Draw rectangle from 'startCorner'\n    let corner = cornerAt(0)\n    ctx.moveTo(corner[0], corner[1])\n  \n    for (let i = 1; i < 4; i++) {\n      corner = cornerAt(i)\n      let nextCornerId = i+1\n      if(nextCornerId == 4){\n        nextCornerId = 0\n      }\n  \n      const width = corners[2][0] - corners[1][0]\n      const height = corners[0][1] - corners[1][1]\n      const x = corners[1][0]\n      const y = corners[1][1]\n  \n      let radius = cornerRadius\n  \n      // Fix radius being too large\n      if(radius > Math.abs(height)/1.5){\n        radius = Math.floor(Math.abs(height)/1.5)\n      }\n      if(radius > Math.abs(width)/1.5){\n        radius = Math.floor(Math.abs(width)/1.5)\n      }\n  \n      if(height < 0){\n        // Negative values in a standard bar chart\n        const x_tl = x;           const x_tr = x+width\n        const y_tl = y+height;    const y_tr = y+height\n  \n        const x_bl = x;           const x_br = x+width\n        const y_bl = y;           const y_br = y\n  \n        // Draw\n        ctx.moveTo(x_bl+radius, y_bl)\n        ctx.lineTo(x_br-radius, y_br)\n        ctx.quadraticCurveTo(x_br, y_br, x_br, y_br-radius)\n        ctx.lineTo(x_tr, y_tr+radius)\n        ctx.quadraticCurveTo(x_tr, y_tr, x_tr-radius, y_tr)\n        ctx.lineTo(x_tl+radius, y_tl)\n        ctx.quadraticCurveTo(x_tl, y_tl, x_tl, y_tl+radius)\n        ctx.lineTo(x_bl, y_bl-radius)\n        ctx.quadraticCurveTo(x_bl, y_bl, x_bl+radius, y_bl)\n      } else {\n        ctx.moveTo(x + radius, y)\n        ctx.lineTo(x + width - radius, y)\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n        ctx.lineTo(x + width, y + height - radius)\n        ctx.quadraticCurveTo(x + width, y + height, x + width, y + height)\n        ctx.lineTo(x + radius, y + height)\n        ctx.quadraticCurveTo(x, y + height, x, y + height)\n        ctx.lineTo(x, y + radius)\n        ctx.quadraticCurveTo(x, y, x + radius, y)\n      }\n    }\n  \n    ctx.fill()\n    if (borderWidth) {\n      ctx.stroke()\n    }\n  }","/home/karthick/Desktop/rebalance/immerse/src/Components/Analytics/Horizontal.jsx",[],"/home/karthick/Desktop/rebalance/immerse/src/Components/TabPanel.jsx",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"64","replacedBy":"68"},{"ruleId":"66","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":1,"column":10,"nodeType":"72","messageId":"73","endLine":1,"endColumn":14},{"ruleId":"74","severity":1,"message":"75","line":82,"column":23,"nodeType":"76","messageId":"77","endLine":82,"endColumn":25},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],["78"],["79"],"no-unused-vars","'data' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]